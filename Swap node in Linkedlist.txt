#include <stdio.h>
#include <stdlib.h>
typedef struct node *pointer;

struct node{
    
    int data;
    pointer next;
};

typedef pointer list;

list AddNode(list node,int value){
    list node1;
    node1=node;
   
    
    if(node1==NULL){
       
        node1=(list)malloc(sizeof(struct node));
        node1->data=value;
        node1->next=NULL;
        
    }
    else
    {
       
        node1->next=AddNode(node1->next,value);
    }
   return node1;
}
void print(list node)
{
    
    while(node!=NULL){
       
        printf("%d ->",node->data);
        node=node->next;
    }
}
list reverse(list node)
{
    list temp,node1,prev;
    node1=node;
    prev=NULL;
    while(node1!=NULL){
        temp=node1->next;
        node1->next=prev;
        prev=node1;
        node1=temp;
    }
    node=prev;
    return node;
    
}
void printMiddle(list head)
{
    list slownode = head;
    list fastnode = head;
 
    if (head!=NULL)
    {
        while (fastnode != NULL && fastnode->next != NULL)
        {
            fastnode = fastnode->next->next;
            slownode = slownode->next;
        }
        printf("The middle element is [%d]\n\n", slownode->data);
    }
}
void  swap(list node,int x,int y){
    list curx,cury,prevx,prevy,temp;
    curx=node;
    cury=node;
    while(curx && curx->data!=x){
        prevx=curx;
        curx=curx->next;
        
    }
    while(cury && cury->data!=y){
        prevy=cury;
        cury=cury->next;
        
    }
    prevx->next=cury;
    prevy->next=curx;
    temp = cury->next;
    cury->next = curx->next;
   curx->next  = temp;
    
}
int main() {
  list node;
  node=NULL;
  node=AddNode(node,11);
  node=AddNode(node,21);
  node=AddNode(node,31);
  node=AddNode(node,41);
  node=AddNode(node,51);
  //node=AddNode(node,6);
  print(node);
   printf("\n");
  printMiddle(node);
  printf("\n");
  node=reverse(node);
  print(node);
  printf("\n");
  swap(node,21,41);
  print(node);
  return 0;
}